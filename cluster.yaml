# An unique identifier for the head node and workers of this cluster.
cluster_name: default

# The maximum number of workers nodes to launch in addition to the head
# node.
max_workers: 10

# The autoscaler will scale up the cluster faster with higher upscaling speed.
# E.g., if the task requires adding more nodes then autoscaler will gradually
# scale up the cluster in chunks of upscaling_speed*currently_running_nodes.
# This number should be > 0.
upscaling_speed: 1.0

# This executes all commands on all nodes in the docker container,
# and opens all the necessary ports to support the Ray cluster.
# Empty string means disabled.
docker:
    # image: "rayproject/ray-ml:latest-gpu" # You can change this to latest-cpu if you don't need GPU support and want a faster startup
    # image: rayproject/ray:latest-cpu   # use this one if you don't need ML dependencies, it's faster to pull
    container_name: "ray_container"
    # If true, pulls latest version of image. Otherwise, `docker run` will only pull the image
    # if no cached version is present.
    pull_before_run: True
    run_options:   # Extra options to pass into "docker run"
        - --ulimit nofile=65536:65536

    # Example of running a GPU head with CPU workers
    head_image: "rayproject/ray-ml:latest-gpu"
    # Allow Ray to automatically detect GPUs

    worker_image: "rayproject/ray-ml:latest-gpu"
    # worker_run_options: []

# If a node is idle for this many minutes, it will be removed.
idle_timeout_minutes: 20

# Cloud-provider specific configuration.
provider:
    type: aws
    region: ap-south-1
    # Availability zone(s), comma-separated, that nodes may be launched in.
    # Nodes will be launched in the first listed availability zone and will
    # be tried in the subsequent availability zones if launching fails.
    availability_zone: ap-south-1a,ap-south-1b
    # Whether to allow node reuse. If set to False, nodes will be terminated
    # instead of stopped.
    cache_stopped_nodes: True # If not present, the default is True.

# How Ray will authenticate with newly launched nodes.
auth:
    ssh_user: ubuntu
available_node_types:
    ray.head.default:
        node_config:
            InstanceType: g5.xlarge
            ImageId: ami-061fa4eb2f407a5fe
            TagSpecifications: 
                    - ResourceType: "instance"
                      Tags:
                          - Key: Name
                            Value: "ray.head.default"  
            BlockDeviceMappings:
                - DeviceName: /dev/sda1
                  Ebs:
                      VolumeSize: 140
                      VolumeType: gp3
    ray.worker.llm1:
        min_workers: 1
        max_workers: 1
        resources: 
            llm1: 10
        node_config:
            InstanceType: g5.xlarge
            ImageId: ami-061fa4eb2f407a5fe
            TagSpecifications: 
                    - ResourceType: "instance"
                      Tags:
                          - Key: Name
                            Value: "ray.worker.llm1"  
            BlockDeviceMappings:
                - DeviceName: /dev/sda1
                  Ebs:
                      VolumeSize: 130
                      VolumeType: gp3
    ray.worker.llm2:
        min_workers: 1
        max_workers: 1
        resources: 
            llm2: 10
        node_config:
            InstanceType: g5.xlarge
            ImageId: ami-061fa4eb2f407a5fe
            TagSpecifications: 
                    - ResourceType: "instance"
                      Tags:
                          - Key: Name
                            Value: "ray.worker.llm2"  
            BlockDeviceMappings:
                - DeviceName: /dev/sda1
                  Ebs:
                      VolumeSize: 130
                      VolumeType: gp3
    ray.worker.llm3:
        min_workers: 1
        max_workers: 1
        resources: 
            llm3: 10
        node_config:
            InstanceType: g5.xlarge
            ImageId: ami-061fa4eb2f407a5fe
            TagSpecifications: 
                    - ResourceType: "instance"
                      Tags:
                          - Key: Name
                            Value: "ray.worker.llm3"  
            BlockDeviceMappings:
                - DeviceName: /dev/sda1
                  Ebs:
                      VolumeSize: 130
                      VolumeType: gp3
    ray.worker.llm4:
        min_workers: 1
        max_workers: 1
        resources: 
            llm4: 10
        node_config:
            InstanceType: g5.xlarge
            ImageId: ami-061fa4eb2f407a5fe
            TagSpecifications: 
                    - ResourceType: "instance"
                      Tags:
                          - Key: Name
                            Value: "ray.worker.llm4"  
            BlockDeviceMappings:
                - DeviceName: /dev/sda1
                  Ebs:
                      VolumeSize: 130
                      VolumeType: gp3
    ray.worker.llm5:
        min_workers: 1
        max_workers: 1
        resources: 
            llm5: 10
        node_config:
            InstanceType: g5.xlarge
            ImageId: ami-061fa4eb2f407a5fe
            TagSpecifications: 
                    - ResourceType: "instance"
                      Tags:
                          - Key: Name
                            Value: "ray.worker.llm5"  
            BlockDeviceMappings:
                - DeviceName: /dev/sda1
                  Ebs:
                      VolumeSize: 130
                      VolumeType: gp3
    ray.worker.llm6:
        min_workers: 1
        max_workers: 1
        resources: 
            llm6: 10
        node_config:
            InstanceType: g5.xlarge
            ImageId: ami-061fa4eb2f407a5fe
            TagSpecifications: 
                    - ResourceType: "instance"
                      Tags:
                          - Key: Name
                            Value: "ray.worker.llm6"  
            BlockDeviceMappings:
                - DeviceName: /dev/sda1
                  Ebs:
                      VolumeSize: 130
                      VolumeType: gp3
    ray.worker.llm7:
        min_workers: 1
        max_workers: 1
        resources: 
            llm7: 10
        node_config:
            InstanceType: g5.xlarge
            ImageId: ami-061fa4eb2f407a5fe
            TagSpecifications: 
                    - ResourceType: "instance"
                      Tags:
                          - Key: Name
                            Value: "ray.worker.llm7"  
            BlockDeviceMappings:
                - DeviceName: /dev/sda1
                  Ebs:
                      VolumeSize: 130
                      VolumeType: gp3
    ray.worker.llm8:
        min_workers: 1
        max_workers: 1
        resources: 
            llm8: 10
        node_config:
            InstanceType: g5.xlarge
            ImageId: ami-061fa4eb2f407a5fe
            TagSpecifications: 
                    - ResourceType: "instance"
                      Tags:
                          - Key: Name
                            Value: "ray.worker.llm8"  
            BlockDeviceMappings:
                - DeviceName: /dev/sda1
                  Ebs:
                      VolumeSize: 130
                      VolumeType: gp3
    ray.worker.sdxl-turbo:
        min_workers: 1
        max_workers: 1
        resources: 
            sdxl_turbo: 10
        node_config:
            InstanceType: g5.2xlarge
            ImageId: ami-061fa4eb2f407a5fe
            TagSpecifications: 
                    - ResourceType: "instance"
                      Tags:
                          - Key: Name
                            Value: "ray.worker.sdxl-turbo"  
            BlockDeviceMappings:
                - DeviceName: /dev/sda1
                  Ebs:
                      VolumeSize: 130
                      VolumeType: gp3
    ray.worker.sdxl_base_and_moondream:
        min_workers: 1
        max_workers: 1
        resources: 
            sdxl_base_and_moondream: 10
        node_config:
            InstanceType: g5.xlarge
            ImageId: ami-061fa4eb2f407a5fe
            TagSpecifications: 
                    - ResourceType: "instance"
                      Tags:
                          - Key: Name
                            Value: "ray.worker.sdxl_base_and_moondream"  
            BlockDeviceMappings:
                - DeviceName: /dev/sda1
                  Ebs:
                      VolumeSize: 130
                      VolumeType: gp3





# Specify the node type of the head node (as configured above).
head_node_type: ray.head.default

# Files or directories to copy to the head and worker nodes. The format is a
# dictionary from REMOTE_PATH: LOCAL_PATH, e.g.
file_mounts: {
#    "/api": "/home/llama/work/playground/ray-cluster/api",
#    "/path2/on/remote/machine": "/path2/on/local/machine",
}

# Files or directories to copy from the head node to the worker nodes. The format is a
# list of paths. The same path on the head node will be copied to the worker node.
# This behavior is a subset of the file_mounts behavior. In the vast majority of cases
# you should just use file_mounts. Only use this if you know what you're doing!
cluster_synced_files: []

# Whether changes to directories in file_mounts or cluster_synced_files in the head node
# should sync to the worker node continuously
file_mounts_sync_continuously: False

# Patterns for files to exclude when running rsync up or rsync down
rsync_exclude:
    - "**/.git"
    - "**/.git/**"
    - config.yaml

# Pattern files to use for filtering out files when running rsync up or rsync down. The file is searched for
# in the source directory and recursively through all subdirectories. For example, if .gitignore is provided
# as a value, the behavior will match git's behavior for finding and using .gitignore files.
rsync_filter:
    - ".gitignore"

# List of commands that will be run before `setup_commands`. If docker is
# enabled, these commands will run outside the container and before docker
# is setup.
initialization_commands: [
    # "curl -fsSL https://get.docker.com -o get-docker.sh", "sudo sh get-docker.sh", "sudo usermod -aG docker $USER", "sudo systemctl restart docker -f",
]

# List of shell commands to run to set up nodes.
setup_commands: []
    # Note: if you're developing Ray, you probably want to create a Docker image that
    # has your Ray repo pre-cloned. Then, you can replace the pip installs
    # below with a git checkout <your_sha> (and possibly a recompile).
    # To run the nightly version of ray (as opposed to the latest), either use a rayproject docker image
    # that has the "nightly" (e.g. "rayproject/ray-ml:nightly-gpu") or uncomment the following line:
    # - pip install -U "ray[default] @ https://s3-us-west-2.amazonaws.com/ray-wheels/latest/ray-3.0.0.dev0-cp37-cp37m-manylinux2014_x86_64.whl"

# Custom commands that will be run on the head node after common setup.
head_setup_commands: []

# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands: [
    # "sudo apt update && sudo apt install python3-venv python3-pip -y",
    # "cd ~/api",
    # "python3 -m venv venv && source venv/bin/activate",
    # "pip install -r requirement.txt"
]

# Command to start ray on the head node. You don't need to change this.
head_start_ray_commands:
    - ray stop
    - ray start --head --port=6379 --object-manager-port=8076 --autoscaling-config=~/ray_bootstrap_config.yaml --dashboard-host=0.0.0.0

# Command to start ray on worker nodes. You don't need to change this.
worker_start_ray_commands:
    - ray stop
    - ray start --address=$RAY_HEAD_IP:6379 --object-manager-port=8076
